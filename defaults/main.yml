---
dotfiles_user_home: "{{ ansible_env.HOME }}"
code_checkout_path: "{{ dotfiles_user_home }}/Code"
bin_directory: "{{ dotfiles_user_home }}/.local/bin"
xdg_share_dir: "{{ dotfiles_user_home }}/.local/share"
xdg_config_dir: "{{ dotfiles_user_home }}/.config"
nix_path: "{{ lookup('env', 'HOME') }}/.nix-profile"
nix_bin: "{{ nix_path }}/bin"
nix_share: "{{ nix_path }}/share"
nix_buildenv_name: dev-pack
nix_config: "{{ xdg_config_dir }}/nixpkgs/config.nix"
zsh_username: "{{ lookup('env', 'USER') }}"
git_name: "{{ lookup('env', 'DOTFILES_BOOTSTRAP_GIT_NAME') }}"
git_email: "{{ lookup('env', 'DOTFILES_BOOTSTRAP_GIT_EMAIL') }}"
nvim_share_dir: "{{ xdg_share_dir }}/nvim"
nvim_vim_plug_dir: "{{ nvim_share_dir }}/site/autoload"
nvim_plugged_dir: "{{ nvim_share_dir }}/plugged"
nvim_config_dir: "{{ xdg_config_dir }}/nvim"
nvim_init: "{{ nvim_config_dir }}/init.vim"
nvim_plugin_config_dir: "{{ nvim_config_dir }}/nvim-config"
nvim_coc_settings_file: "{{ nvim_config_dir }}/coc-settings.json"
ccls_tmp_dir: /tmp/ccls
clang_format_fileoption: file
vscode_cpptools_version: 1.6.0
vscode_cpptools_download: "{{ dotfiles_user_home }}/.local/vscode-cpptools"
vscode_cpptools_extension: cpptools-linux
vscode_cpptools_extension_path: "{{ vscode_cpptools_download }}/{{ vscode_cpptools_extension }}"
vscode_cpptools_vsix_file_path: "{{ vscode_cpptools_extension_path }}.vsix"
vscode_cpptools_extension_file_path: "{{ vscode_cpptools_extension_path }}/extension"
vscode_cpptools_executable_path: "{{ vscode_cpptools_extension_file_path }}/debugAdapters/bin/OpenDebugAD7"
vscode_cpptools_executable_path_mono: "{{ vscode_cpptools_extension_path }}/extensions/debugAdapters/bin/mono.linux"
vscode_cpptools_extension_json_config: "{{ vscode_cpptools_extension_file_path }}/cppdbg.ad7Engine.json"
vscode_cpptools_extension_neovim_json_config: "{{ vscode_cpptools_extension_file_path }}/debugAdapters/bin/nvim-dap.ad7Engine.json"
vscode_cpptools_runner: |
  dap.configurations.cpp = {
    {
      name = "Launch file",
      type = "cppdbg",
      request = "launch",
      program = function()
        return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
      end,
      cwd = '${workspaceFolder}',
      stopOnEntry = true,
    },
    {
      name = 'Attach to gdbserver :1234',
      type = 'cppdbg',
      request = 'launch',
      MIMode = 'gdb',
      miDebuggerServerAddress = 'localhost:1234',
      miDebuggerPath = '/usr/bin/gdb',
      cwd = '${workspaceFolder}',
      program = function()
        return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
      end,
    },
  }
  dap.configurations.c = dap.configurations.cpp
  dap.configurations.rust = dap.configurations.cpp
cpp_neovim_plugins:
  - "Plug 'jackguo380/vim-lsp-cxx-highlight'"
  - "Plug 'Shatur/neovim-cmake'"
language_neovim_plugins: "{{ language_neovim_plugins + cpp_neovim_plugins }}"
cpp_ale_plugin_settings:
  - "let g:ale_c_parse_compile_commands=1"
  - "let g:ale_linters = {"
  - "\\   'c': ['gcc', 'g++'],"
  - "\\   'cpp': ['gcc', 'g++'],"
  - "\\}"
ale_plugin_settings: "{{ ale_plugin_settings + cpp_ale_plugin_settings }}"
cpp_neoformat_plugin_settings:
  - "let g:neoformat_cpp_clangformat = {"
  - "\\   'exe': '{{ nix_bin }}/clang-format',"
  - "\\   'args': ['--style={{ clang_format_fileoption }}']"
  - "\\}"
  - "let g:neoformat_enabled_cpp = ['clangformat']"
  - "let g:neoformat_enabled_c = ['clangformat']"
neoformat_plugin_settings: "{{ neoformat_plugin_settings + cpp_neoformat_plugin_settings }}"
cpp_dap_plugin_settings:
  - "lua << EOF"
  - "  local dap = require('dap')"
  - "  dap.adapters.cppdbg = {"
  - "    type = 'executable',"
  - "    command = '{{ vscode_cpptools_executable_path }}',"
  - "  }"
  - "  {{ vscode_cpptools_runner }}"
  - "EOF"
dap_plugin_settings: "{{ dap_plugin_settings + cpp_dap_plugin_settings }}"
cpp_extra_plugin_settings:
  - "lua << EOF"
  - "    require('telescope').load_extension('cmake')"
  - "EOF"
  - "command! CMakeDefaultConfigureOptions :CMake<Space>configure<Space>-G<Space>Ninja<Space>-DCMAKE_C_COMPILER=/usr/bin/gcc<Space>-DCMAKE_CXX_COMPILER=/usr/bin/g++"
  - "command! CMakeCopyCompileCommands :call system('ln -fs build/linux-debug/compile_commands.json .')"
  - "function! s:cmake_configure_func()"
  - "     :CMakeDefaultConfigureOptions"
  - "     :CMakeCopyCompileCommands"
  - "endfunction"
  - "command! -nargs=0 CMakeDefaultConfigureCommand call s:cmake_configure_func()"
  - "nmap <Leader>c [cmake-p]"
  - "xmap <Leader>c [cmake-p]"
  - "\"nnoremap <silent> [cmake-p]c :CMake configure<CR>"
  - "nnoremap <silent> [cmake-p]c :CMakeDefaultConfigureCommand<CR>"
  - "nnoremap <silent> [cmake-p]b :CMake build<CR>"
  - "nnoremap <silent> [cmake-p]a :CMake build_all<CR>"
  - "nnoremap <silent> [cmake-p]r :CMake run<CR>"
  - "nnoremap <silent> [cmake-p]d :CMake debug<CR>"
  - "nnoremap <silent> [cmake-p]l :CMake clean<CR>"
  - "nnoremap <silent> [cmake-p]t :CMake set_target_arguments<Space>"
  - "nnoremap <silent> [telescope-p]c :Telescope cmake select_target<CR>"
  - "nnoremap <silent> [telescope-p]b :Telescope cmake select_build_type<CR>"
  - "let g:cmake_asyncrun_options={'mode': 'term', 'pos': 'floaterm', 'save': 2}"
  - "let g:cmake_target_asyncrun_options={'mode': 'term', 'pos': 'floaterm'}"
extra_plugin_settings: "{{ extra_plugin_settings + cpp_extra_plugin_settings }}"
ccls_clang_args: {}
ccls_coc_config:
  ccls:
    command: "{{ nix_bin }}/ccls"
    filetypes:
      - c
      - cc
      - cpp
      - cxx
      - c++
      - objc
      - objcpp
    rootPatterns:
      - .ccls
      - compile_commands.json
      - .git/
      - .vscode
    initializationOptions:
      cache:
        directory: "{{ ccls_tmp_dir }}"
      highlight:
        lsRanges: true
lsp_provider_coc_settings: "{{ lsp_provider_coc_settings | combine(ccls_coc_config) }}"
cpp_tools_nix:
  - clang-tools
  - ccls
  - cmake
  - ninja
lang_tools_nix: "{{ lang_tools_nix + cpp_tools_nix }}"
