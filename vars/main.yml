---
extra_nvim_language_mappings_cpp:
  - "m.nname('<leader>c', 'C/C++ CMake')"
  - "nnoremap('<leader>cc', '<cmd>CMake configure<CR>', 'silent', { ft = 'cpp' }, 'C/C++ CMake: Configure')"
  - "nnoremap('<leader>ct', '<cmd>CMake select_target<CR>', 'silent', { ft = 'cpp' }, 'C/C++ CMake: Select Target')"
  - "nnoremap('<leader>cb', '<cmd>CMake build<CR>', 'silent', { ft = 'cpp' }, 'C/C++ CMake: Build Selected Target')"
  - "nnoremap('<leader>ca', '<cmd>CMake build_all<CR>', 'silent', { ft = 'cpp' }, 'C/C++ CMake: Build All')"
  - "nnoremap('<leader>cr', '<cmd>CMake run<CR>', 'silent', { ft = 'cpp' }, 'C/C++ CMake: Run Target')"
  - "nnoremap('<leader>cd', '<cmd>CMake debug<CR>', 'silent', { ft = 'cpp' }, 'C/C++ CMake: Debug Target')"
  - "nnoremap('<leader>cl', '<cmd>CMake clean<CR>', 'silent', { ft = 'cpp' }, 'C/C++ CMake: Clean')"
extra_nvim_language_mappings: "{{ extra_nvim_language_mappings_cpp }}"
cpp_neovim_plugins:
  - "use 'p00f/clangd_extensions.nvim'"
  - "use { 'Shatur/neovim-cmake',"
  - "  requires = {"
  - "    'nvim-lua/plenary.nvim',"
  - "    'mfussenegger/nvim-dap',"
  - "    'stevearc/dressing.nvim'"
  - "  }"
  - "}"
  - "use { 'Badhi/nvim-treesitter-cpp-tools',"
  - "  requires = {"
  - "    'nvim-treesitter/nvim-treesitter'"
  - "  }"
  - "}"
lsp_providers:
  - clangd
lsp_providers_setup:
  - "require(\"clangd_extensions\").setup()"
  - "local configs = require('lspconfig.configs')"
  - "local nvim_lsp = require('lspconfig')"
  - "if not configs.neocmake then"
  - "    configs.neocmake = {"
  - "        default_config = {"
  - "            cmd = { 'neocmakelsp' },"
  - "            filetypes = { 'cmake' },"
  - "            root_dir = function(fname)"
  - "                return nvim_lsp.util.find_git_ancestor(fname)"
  - "            end,"
  - "            single_file_support = true,-- suggested"
  - "            on_attach = on_attach"
  - "        }"
  - "    }"
  - "    nvim_lsp.neocmake.setup({})"
  - "end"
nvim_completion_config:
- "sorting = {"
- "    comparators = {"
- "        cmp.config.compare.offset,"
- "        cmp.config.compare.exact,"
- "        cmp.config.compare.recently_used,"
- "        require('clangd_extensions.cmp_scores'),"
- "        cmp.config.compare.kind,"
- "        cmp.config.compare.sort_text,"
- "        cmp.config.compare.length,"
- "        cmp.config.compare.order,"
- "    },"
- "},"
treesitter_parsers:
  - cpp
  - c
  - llvm
  - cmake
treesitter_extra_config:
  - "nt_cpp_tools = {"
  - "    enable = true,"
  - "    preview = {"
  - "        quit = 'q', -- optional keymapping for quit preview"
  - "        accept = '<tab>' -- optional keymapping for accept preview"
  - "    },"
  - "    header_extension = 'h', -- optional"
  - "    source_extension = 'cxx', -- optional"
  - "},"
language_neovim_plugins: "{{ cpp_neovim_plugins }}"
cpp_ale_plugin_settings:
  - "vim.cmd([[ let g:ale_c_parse_compile_commands=1 ]])"
  - "vim.cmd([["
  - "  let g:ale_linters = {"
  - "  \\  'c': ['gcc', 'g++'],"
  - "  \\  'cpp': ['gcc', 'g++'],"
  - "  \\  'cc': ['gcc', 'g++'],"
  - "  \\  'cxx': ['gcc', 'g++'],"
  - "  \\  'hpp': ['gcc', 'g++'],"
  - "  \\  'hxx': ['gcc', 'g++'],"
  - "  \\}"
  - "]])"
ale_plugin_settings: "{{ cpp_ale_plugin_settings }}"
cpp_neoformat_plugin_settings:
  - "vim.cmd([["
  - "  let g:neoformat_cpp_clangformat = {"
  - "  \\  'exe': '{{ nix_bin }}/clang-format',"
  - "  \\  'args': ['--style={{ clang_format_fileoption }}'],"
  - "  \\}"
  - "]])"
  - "vim.cmd([[ let g:neoformat_enabled_cpp = ['clangformat'] ]])"
  - "vim.cmd([[ let g:neoformat_enabled_c = ['clangformat'] ]])"
neoformat_plugin_settings: "{{ cpp_neoformat_plugin_settings }}"
cpp_dap_plugin_settings:
  - "  local dap = require('dap')"
  - "  dap.adapters.cppdbg = {"
  - "    id = 'cppdbg',"
  - "    type = 'executable',"
  - "    command = '{{ vscode_cpptools_executable_path }}',"
  - "  }"
  - "  {{ vscode_cpptools_runner | indent(width=2) }}"
dap_plugin_settings: "{{ cpp_dap_plugin_settings }}"
cpp_extra_lua_plugin_settings:
  - "local Path = require('plenary.path')"
  - "require('cmake').setup({"
  - "  cmake_executable = '{{ cmake_bin }}', -- CMake executable to run."
  - "  save_before_build = true, -- Save all buffers before building."
  - "  parameters_file = 'neovim.json', -- JSON file to store information about selected target, run arguments and build type."
  - "  build_dir = tostring(Path:new('{cwd}', 'build', '{os}-{build_type}')), -- Build directory. The expressions `{cwd}`, `{os}` and `{build_type}` will be expanded with the corresponding text values. Could be a function that return the path to the build directory."
  - "  default_projects_path = tostring(Path:new(vim.loop.os_homedir(), '{{ code_checkout_path_github }}')), -- Default folder for creating project."
  - "  configure_args = {"
  - "    '-G',"
  - "    'Ninja',"
  - "    '-D',"
  - "    'CMAKE_EXPORT_COMPILE_COMMANDS=1',"
  - "    '-D',"
  - "    'CMAKE_C_COMPILER={{ gcc_bin }}',"
  - "    '-D',"
  - "    'CMAKE_CXX_COMPILER={{ gpp_bin }}',"
  - "  }, -- Default arguments that will be always passed at cmake configure step. By default tells cmake to generate `compile_commands.json`."
  - "  build_args = {}, -- Default arguments that will be always passed at cmake build step."
  - "  on_build_output = nil, -- Callback that will be called each time data is received by the current process. Accepts the received data as an argument."
  - "  quickfix = {"
  - "    pos = 'botright', -- Where to open quickfix"
  - "    height = 10, -- Height of the opened quickfix."
  - "    only_on_error = false, -- Open quickfix window only if target build failed."
  - "  },"
  - "  copy_compile_commands = true, -- Copy compile_commands.json to current working directory."
  - "  dap_configuration = {"
  - "    type = 'lldb',"
  - "    request = 'launch',"
  - "    stopOnEntry = false,"
  - "    runInTerminal = true,"
  - "  },"
  - "  dap_open_command = require('dapui').open,"
  - "})"
extra_lua_plugin_settings: "{{ cpp_extra_lua_plugin_settings }}"
ccls_coc_config:
  ccls:
    command: "{{ nix_bin }}/ccls"
    filetypes: "{{ cpp_file_extensions }}"
    rootPatterns:
      - .ccls
      - compile_commands.json
      - .git/
      - .vscode
    initializationOptions:
      clang: "{{ ccls_clang_args }}"
      cache:
        directory: "{{ ccls_tmp_dir }}"
      highlight:
        lsRanges: true
lsp_provider_coc_settings: "{{ ccls_coc_config }}"
cpp_tools_nix:
  - clang-tools
  - cmake
  - ninja
lang_tools_nix: "{{ cpp_tools_nix }}"
