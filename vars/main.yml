---
cpp_neovim_plugins:
  - "use 'p00f/clangd_extensions.nvim'"
  - "use { 'Shatur/neovim-cmake',"
  - "  requires = {"
  - "    'nvim-lua/plenary.nvim',"
  - "    'mfussenegger/nvim-dap'"
  - "  }"
  - "}"
lsp_providers_setup:
  - "require'lspconfig'.clangd.setup{}"
  - "require(\"clangd_extensions\").setup()"
  - "require('lspconfig').clangd.setup {"
  - "  on_attach = keybinds.on_attach,"
  - "  cmd = {"
  - "    \"{{ clangd_bin }}\","
  - "    \"--background-index\","
  - "  },"
  - "  filetypes = {% raw %}{{% endraw %} {{ cpp_file_extensions | map('regex_replace', '(.*)', '\"\\1\"') | join(',')}} {% raw %}}{% endraw %},"
  - "}"
treesitter_parsers:
  - cpp
  - c
  - llvm
  - cmake
language_neovim_plugins: "{{ cpp_neovim_plugins }}"
cpp_ale_plugin_settings:
  - "vim.cmd([[ let g:ale_c_parse_compile_commands=1 ]])"
  - "vim.cmd([["
  - "  let g:ale_linters = {"
  - "  \\  'c': ['gcc', 'g++'],"
  - "  \\  'cpp': ['gcc', 'g++'],"
  - "  \\  'cc': ['gcc', 'g++'],"
  - "  \\  'cxx': ['gcc', 'g++'],"
  - "  \\  'hpp': ['gcc', 'g++'],"
  - "  \\  'hxx': ['gcc', 'g++'],"
  - "  \\}"
  - "]])"
ale_plugin_settings: "{{ cpp_ale_plugin_settings }}"
cpp_neoformat_plugin_settings:
  - "vim.cmd([["
  - "  let g:neoformat_cpp_clangformat = {"
  - "  \\  'exe': '{{ nix_bin }}/clang-format',"
  - "  \\  'args': ['--style={{ clang_format_fileoption }}'],"
  - "  \\}"
  - "]])"
  - "vim.cmd([[ let g:neoformat_enabled_cpp = ['clangformat'] ]])"
  - "vim.cmd([[ let g:neoformat_enabled_c = ['clangformat'] ]])"
neoformat_plugin_settings: "{{ cpp_neoformat_plugin_settings }}"
cpp_dap_plugin_settings:
  - "  local dap = require('dap')"
  - "  dap.adapters.cppdbg = {"
  - "    type = 'executable',"
  - "    command = '{{ vscode_cpptools_executable_path }}',"
  - "  }"
  - "  {{ vscode_cpptools_runner | indent(width=2) }}"
dap_plugin_settings: "{{ cpp_dap_plugin_settings }}"
cpp_extra_plugin_settings:
  - "command! CMakeDefaultConfigureOptions :CMake<Space>configure<Space>-G<Space>Ninja<Space>-DCMAKE_C_COMPILER={{ gcc_path }}<Space>-DCMAKE_CXX_COMPILER={{ gpp_path }}"
  - "command! {{ nvim_cmake_copy_compile_commands }} :call system('ln -fs {{ nvim_cmake_build_dir }}/compile_commands.json .')"
  - "function! s:cmake_configure_func()"
  - "     :CMakeDefaultConfigureOptions"
  - "     :{{ nvim_cmake_copy_compile_commands }}"
  - "endfunction"
  - "command! -nargs=0 CMakeDefaultConfigureCommand call s:cmake_configure_func()"
  - "nmap <Leader>c [cmake-p]"
  - "xmap <Leader>c [cmake-p]"
  - "nnoremap <silent> [cmake-p]b :CMake build<CR>"
  - "nnoremap <silent> [cmake-p]a :CMake build_all<CR>"
  - "nnoremap <silent> [cmake-p]r :CMake run<CR>"
  - "nnoremap <silent> [cmake-p]d :CMake debug<CR>"
  - "nnoremap <silent> [cmake-p]l :CMake clean<CR>"
  - "nnoremap <silent> [cmake-p]t :CMake set_target_arguments<Space>"
  - "nnoremap <silent> [telescope-p]c :Telescope cmake select_target<CR>"
  - "nnoremap <silent> [telescope-p]b :Telescope cmake select_build_type<CR>"
  - "let g:cmake_asyncrun_options={'mode': 'term', 'pos': 'floaterm', 'save': 2}"
  - "let g:cmake_target_asyncrun_options={'mode': 'term', 'pos': 'floaterm'}"
  - "autocmd BufNewFile,BufRead *cpp.inc,*h.inc,*.cxx,*.hxx,*.hpp set filetype=cpp"
  - "autocmd BufNewFile,BufRead *.cc set filetype=c"
extra_plugin_settings: "{{ cpp_extra_plugin_settings }}"
cpp_extra_lua_plugin_settings:
  - "local Path = require('plenary.path')"
  - "require('cmake').setup({"
  - "  parameters_file = 'neovim.json',"
  - "  configure_args = { '-D', 'CMAKE_EXPORT_COMPILE_COMMANDS=1' },"
  - "  dap_configuration = {"
  - "    type = 'codelldb',"
  - "    request = 'launch',"
  - "    stopOnEntry = false,"
  - "    runInTerminal = true,"
  - "  }"
  - "})"
extra_lua_plugin_settings: "{{ cpp_extra_lua_plugin_settings }}"
ccls_coc_config:
  ccls:
    command: "{{ nix_bin }}/ccls"
    filetypes: "{{ cpp_file_extensions }}"
    rootPatterns:
      - .ccls
      - compile_commands.json
      - .git/
      - .vscode
    initializationOptions:
      clang: "{{ ccls_clang_args }}"
      cache:
        directory: "{{ ccls_tmp_dir }}"
      highlight:
        lsRanges: true
lsp_provider_coc_settings: "{{ ccls_coc_config }}"
cpp_tools_nix:
  - clang-tools
  - ccls
  - cmake
  - ninja
lang_tools_nix: "{{ cpp_tools_nix }}"
