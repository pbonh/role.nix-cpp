---
cpp_neovim_plugins:
  - "use 'p00f/clangd_extensions.nvim'"
  - "use { 'Shatur/neovim-cmake',"
  - "  requires = {"
  - "    'nvim-lua/plenary.nvim',"
  - "    'mfussenegger/nvim-dap',"
  - "    'stevearc/dressing.nvim'"
  - "  }"
  - "}"
  - "use { 'Badhi/nvim-treesitter-cpp-tools',"
  - "  requires = {"
  - "    'nvim-treesitter/nvim-treesitter'"
  - "  }"
  - "}"
lsp_providers:
  - clangd
lsp_providers_setup:
  - "require(\"clangd_extensions\").setup()"
  - "local configs = require('lspconfig.configs')"
  - "local nvim_lsp = require('lspconfig')"
  - "if not configs.neocmake then"
  - "    configs.neocmake = {"
  - "        default_config = {"
  - "            cmd = { 'neocmakelsp' },"
  - "            filetypes = { 'cmake' },"
  - "            root_dir = function(fname)"
  - "                return nvim_lsp.util.find_git_ancestor(fname)"
  - "            end,"
  - "            single_file_support = true,-- suggested"
  - "            on_attach = on_attach"
  - "        }"
  - "    }"
  - "    nvim_lsp.neocmake.setup({})"
  - "end"
treesitter_parsers:
  - cpp
  - c
  - llvm
  - cmake
treesitter_extra_config:
  - "nt_cpp_tools = {"
  - "    enable = true,"
  - "    preview = {"
  - "        quit = 'q', -- optional keymapping for quit preview"
  - "        accept = '<tab>' -- optional keymapping for accept preview"
  - "    },"
  - "    header_extension = 'h', -- optional"
  - "    source_extension = 'cxx', -- optional"
  - "},"
language_neovim_plugins: "{{ cpp_neovim_plugins }}"
cpp_ale_plugin_settings:
  - "vim.cmd([[ let g:ale_c_parse_compile_commands=1 ]])"
  - "vim.cmd([["
  - "  let g:ale_linters = {"
  - "  \\  'c': ['gcc', 'g++'],"
  - "  \\  'cpp': ['gcc', 'g++'],"
  - "  \\  'cc': ['gcc', 'g++'],"
  - "  \\  'cxx': ['gcc', 'g++'],"
  - "  \\  'hpp': ['gcc', 'g++'],"
  - "  \\  'hxx': ['gcc', 'g++'],"
  - "  \\}"
  - "]])"
ale_plugin_settings: "{{ cpp_ale_plugin_settings }}"
cpp_neoformat_plugin_settings:
  - "vim.cmd([["
  - "  let g:neoformat_cpp_clangformat = {"
  - "  \\  'exe': '{{ nix_bin }}/clang-format',"
  - "  \\  'args': ['--style={{ clang_format_fileoption }}'],"
  - "  \\}"
  - "]])"
  - "vim.cmd([[ let g:neoformat_enabled_cpp = ['clangformat'] ]])"
  - "vim.cmd([[ let g:neoformat_enabled_c = ['clangformat'] ]])"
neoformat_plugin_settings: "{{ cpp_neoformat_plugin_settings }}"
cpp_dap_plugin_settings:
  - "  local dap = require('dap')"
  - "  dap.adapters.cppdbg = {"
  - "    id = 'cppdbg',"
  - "    type = 'executable',"
  - "    command = '{{ vscode_cpptools_executable_path }}',"
  - "  }"
  - "  {{ vscode_cpptools_runner | indent(width=2) }}"
dap_plugin_settings: "{{ cpp_dap_plugin_settings }}"
cpp_extra_lua_plugin_settings:
  - "local Path = require('plenary.path')"
  - "require('cmake').setup({"
  - "  cmake_executable = '{{ cmake_bin }}',"
  - "  parameters_file = 'neovim.json',"
  - "  configure_args = { '-D', 'CMAKE_EXPORT_COMPILE_COMMANDS=1' },"
  - "  quickfix_only_on_error = false,"
  - "  copy_compile_commands = true,"
  - "  dap_open_command = require('dapui').open,"
  - "  dap_configuration = {"
  - "    type = 'cppdbg',"
  - "    request = 'launch',"
  - "    stopOnEntry = false,"
  - "    runInTerminal = true,"
  - "  },"
  - "  dap_open_command = require('dapui').open,"
  - "})"
extra_lua_plugin_settings: "{{ cpp_extra_lua_plugin_settings }}"
ccls_coc_config:
  ccls:
    command: "{{ nix_bin }}/ccls"
    filetypes: "{{ cpp_file_extensions }}"
    rootPatterns:
      - .ccls
      - compile_commands.json
      - .git/
      - .vscode
    initializationOptions:
      clang: "{{ ccls_clang_args }}"
      cache:
        directory: "{{ ccls_tmp_dir }}"
      highlight:
        lsRanges: true
lsp_provider_coc_settings: "{{ ccls_coc_config }}"
cpp_tools_nix:
  - clang-tools
  - cmake
  - ninja
lang_tools_nix: "{{ cpp_tools_nix }}"
