---
cpp_neovim_plugins:
  - "Plug 'jackguo380/vim-lsp-cxx-highlight'"
  - "Plug 'Shatur/neovim-cmake'"
language_neovim_plugins: "{{ cpp_neovim_plugins }}"
cpp_ale_plugin_settings:
  - "let g:ale_c_parse_compile_commands=1"
  - "let g:ale_linters = {"
  - "\\   'c': ['gcc', 'g++'],"
  - "\\   'cpp': ['gcc', 'g++'],"
  - "\\}"
ale_plugin_settings: "{{ cpp_ale_plugin_settings }}"
cpp_neoformat_plugin_settings:
  - "let g:neoformat_cpp_clangformat = {"
  - "\\   'exe': '{{ nix_bin }}/clang-format',"
  - "\\   'args': ['--style={{ clang_format_fileoption }}']"
  - "\\}"
  - "let g:neoformat_enabled_cpp = ['clangformat']"
  - "let g:neoformat_enabled_c = ['clangformat']"
neoformat_plugin_settings: "{{ cpp_neoformat_plugin_settings }}"
cpp_dap_plugin_settings:
  - "  local dap = require('dap')"
  - "  dap.adapters.cppdbg = {"
  - "    type = 'executable',"
  - "    command = '{{ vscode_cpptools_executable_path }}',"
  - "  }"
  - "  {{ vscode_cpptools_runner | indent(width=2) }}"
dap_plugin_settings: "{{ cpp_dap_plugin_settings }}"
cpp_extra_plugin_settings:
  - "command! CMakeDefaultConfigureOptions :CMake<Space>configure<Space>-G<Space>Ninja<Space>-DCMAKE_C_COMPILER=/usr/bin/gcc<Space>-DCMAKE_CXX_COMPILER=/usr/bin/g++"
  - "command! CMakeCopyCompileCommands :call system('ln -fs build/linux-debug/compile_commands.json .')"
  - "function! s:cmake_configure_func()"
  - "     :CMakeDefaultConfigureOptions"
  - "     :CMakeCopyCompileCommands"
  - "endfunction"
  - "command! -nargs=0 CMakeDefaultConfigureCommand call s:cmake_configure_func()"
  - "nmap <Leader>c [cmake-p]"
  - "xmap <Leader>c [cmake-p]"
  - "nnoremap <silent> [cmake-p]c :CMakeDefaultConfigureCommand<CR>"
  - "nnoremap <silent> [cmake-p]b :CMake build<CR>"
  - "nnoremap <silent> [cmake-p]a :CMake build_all<CR>"
  - "nnoremap <silent> [cmake-p]r :CMake run<CR>"
  - "nnoremap <silent> [cmake-p]d :CMake debug<CR>"
  - "nnoremap <silent> [cmake-p]l :CMake clean<CR>"
  - "nnoremap <silent> [cmake-p]t :CMake set_target_arguments<Space>"
  - "nnoremap <silent> [telescope-p]c :Telescope cmake select_target<CR>"
  - "nnoremap <silent> [telescope-p]b :Telescope cmake select_build_type<CR>"
  - "let g:cmake_asyncrun_options={'mode': 'term', 'pos': 'floaterm', 'save': 2}"
  - "let g:cmake_target_asyncrun_options={'mode': 'term', 'pos': 'floaterm'}"
extra_plugin_settings: "{{ cpp_extra_plugin_settings }}"
cpp_extra_lua_plugin_settings:
  - "require('telescope').load_extension('cmake')"
extra_lua_plugin_settings: "{{ cpp_extra_lua_plugin_settings }}"
ccls_clang_args: {}
ccls_coc_config:
  ccls:
    command: "{{ nix_bin }}/ccls"
    filetypes:
      - c
      - cc
      - cpp
      - cxx
      - c++
      - objc
      - objcpp
    rootPatterns:
      - .ccls
      - compile_commands.json
      - .git/
      - .vscode
    initializationOptions:
      cache:
        directory: "{{ ccls_tmp_dir }}"
      highlight:
        lsRanges: true
lsp_provider_coc_settings: "{{ ccls_coc_config }}"
cpp_tools_nix:
  - clang-tools
  - ccls
  - cmake
  - ninja
lang_tools_nix: "{{ cpp_tools_nix }}"
